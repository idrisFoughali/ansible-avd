{# tenant vlan interfaces #}
vlan_interfaces:
{% for tenant in switch.tenants | arista.avd.natural_sort %}
{%     for vrf in switch.tenants[tenant].vrfs | arista.avd.natural_sort %}
{%         for svi in switch.tenants[tenant].vrfs[vrf].svis | arista.avd.natural_sort %}
{%             set svi_config = tenants[tenant].vrfs[vrf].svis[svi] %}
{# Detect if a svi_profile exists #}
{# If exists, create a shortpath to access profile data #}
{%             if svi_config.profile is arista.avd.defined %}
{%                 set svi_profile = svi_profiles[svi_config.profile] | arista.avd.default() %}
{%             endif %}
{%             set svi_tags = svi_config.tags | arista.avd.default(
                              svi_profile.tags) %}
{%             set svi_name = svi_config.name | arista.avd.default(
                              svi_profile.name) %}
{%             set svi_enabled = svi_config.enabled | arista.avd.default(
                                 svi_profile.enabled) %}
{%             set svi_ip_virtual_router_address = svi_config.ip_virtual_router_address | arista.avd.default(
                                                   svi_profile.ip_virtual_router_address) %}
{%             set svi_ip_address_virtual = svi_config.ip_address_virtual | arista.avd.default(
                                            svi_profile.ip_address_virtual) %}
{%             set svi_ip_address_virtual_secondary = svi_config.ip_address_virtual_secondary | arista.avd.default(
                                                      svi_profile.ip_address_virtual_secondary) %}
{%             set svi_mtu = svi_config.mtu | arista.avd.default(
                             svi_profile.mtu) %}
{%             set svi_ip_helpers = svi_config.ip_helpers | arista.avd.default(
                                    tenants[tenant].vrfs[vrf].ip_helpers,
                                    svi_profile.ip_helpers) %}
{%             set svi_raw_eos_cli = svi_config.nodes[inventory_hostname].raw_eos_cli | arista.avd.default(
                                     svi_profile.nodes[inventory_hostname].raw_eos_cli,
                                     svi_config.raw_eos_cli,
                                     svi_profile.raw_eos_cli) %}
{%             set svi_structured_config = svi_config.nodes[inventory_hostname].structured_config | arista.avd.default(
                                           svi_profile.nodes[inventory_hostname].structured_config,
                                           svi_config.structured_config,
                                           svi_profile.structured_config) %}
  Vlan{{ svi | int }}:
    tenant: {{ tenant }}
    tags: {{ svi_tags }}
    description: {{ svi_name }}
{%             if svi_enabled is arista.avd.defined(true) %}
    shutdown: false
{%             else %}
    shutdown: true
{%             endif %}
    vrf: {{ vrf }}
{# IP address configuration #}
{%             if tenants[tenant].vrfs[vrf].svis[svi].nodes[inventory_hostname].ip_address is arista.avd.defined %}
    ip_address: {{ tenants[tenant].vrfs[vrf].svis[svi].nodes[inventory_hostname].ip_address }}
{%             endif %}
{# Virtual Router IP Address #}
{%             if svi_ip_virtual_router_address is arista.avd.defined %}
    ip_virtual_router_address: {{ svi_ip_virtual_router_address | ansible.netcommon.ipaddr('address') }}
{%             endif %}
{# Virtual IP address #}
{%             if svi_ip_address_virtual is arista.avd.defined %}
    ip_address_virtual: {{ svi_ip_address_virtual }}
{%             endif %}
{# Virtual Secondary IP address #}
{%             if svi_ip_address_virtual_secondary is arista.avd.defined %}
    ip_address_virtual_secondary: {{ svi_ip_address_virtual_secondary }}
{%             endif %}
{# MTU definition #}
{%             if svi_mtu is arista.avd.defined %}
    mtu: {{ svi_mtu }}
{%             endif %}
{# IP helper configuration #}
{%             if svi_ip_helpers is arista.avd.defined %}
    ip_helpers:
{%                 for helper_ip in svi_ip_helpers %}
      {{ helper_ip }}:
        source_interface: {{ svi_ip_helpers[helper_ip].source_interface | arista.avd.default }}
        vrf: {{ svi_ip_helpers[helper_ip].source_vrf | arista.avd.default }}
{%                 endfor %}
{%             endif %}
{%             if svi_raw_eos_cli is arista.avd.defined %}
    eos_cli: |
      {{ svi_raw_eos_cli | indent(6,false) }}
{%             endif %}
{%             if svi_structured_config is arista.avd.defined %}
    struct_cfg: {{ svi_structured_config }}
{%             endif %}
{%         endfor %}
{# VLAN interface for iBGP peering in overlay VRFs #}
{%         if switch.mlag_l3 is arista.avd.defined(true) %}
{%             set configure_mlag_ibgp_peering = tenants[tenant].vrfs[vrf].enable_mlag_ibgp_peering_vrfs | arista.avd.default(
                                                 tenants[tenant].enable_mlag_ibgp_peering_vrfs,
                                                 true) %}
{%             if configure_mlag_ibgp_peering %}
  Vlan{{ tenants[tenant].vrfs[vrf].mlag_ibgp_peering_vlan | arista.avd.default (mlag_ibgp_peering_vrfs.base_vlan + (tenants[tenant].vrfs[vrf].vrf_vni - 1)) }}:
    tenant: {{ tenant }}
    type: underlay_peering
    shutdown: false
    description: "MLAG_PEER_L3_iBGP: vrf {{ vrf }}"
    vrf: {{ vrf }}
    ip_address: {{ switch.mlag_l3_ip | arista.avd.default(switch.mlag_ip) }}/31
    mtu: {{ p2p_uplinks_mtu }}
{%             endif %}
{%         endif %}
{%     endfor %}
{% endfor %}
